<?xml version="1.0" encoding="UTF-8" ?>
<testsuites disabled="0" errors="0" failures="9" tests="8" time="6.524">
 <testsuite name="Have manager functionalities" timestamp="2020-01-27T12:22:54" hostname="localhost" time="5.714" errors="0" tests="3" skipped="0" disabled="0" failures="3">
  <testcase classname="Have manager functionalities" name="should allow manager to Add customer" time="5.487">
   <failure type="exception" message="Failed: each key must be a number of string; got undefined"><![CDATA[TypeError: each key must be a number of string; got undefined
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver.js:2162:21
    at Array.forEach (<anonymous>)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver.js:2157:16
    at processTicksAndRejections (internal/process/task_queues.js:94:5)
From: Task: WebElement.sendKeys()
    at thenableWebDriverProxy.schedule (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver.js:807:17)
    at WebElement.schedule_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver.js:2010:25)
    at WebElement.sendKeys (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver.js:2174:19)
    at actionFn (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:89:44)
    at Array.map (<anonymous>)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:461:65
    at ManagedPromise.invokeCallback_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1376:14)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2927:27Error
    at ElementArrayFinder.applyAction_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:459:27)
    at ElementArrayFinder.<computed> [as sendKeys] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:91:29)
    at ElementFinder.<computed> [as sendKeys] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:831:22)
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:23:19)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
From: Task: Run it("should allow manager to Add customer") in control flow
    at UserContext.<anonymous> (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:94:19)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
    at Spec.queueRunnerFactory (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:909:35)
    at Spec.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:526:10)
    at UserContext.fn (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:5340:37)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
From asynchronous test: 
Error
    at Suite.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:16:5)
    at addSpecsToSuite (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1107:25)
    at Env.describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1074:7)
    at describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4399:18)
    at Object.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:15:1)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)]]>
   </failure>
  </testcase>
  <testcase classname="Have manager functionalities" name="add the new customer to list of customers" time="0.192">
   <failure type="toBe" message="Expected false to be true."><![CDATA[Error: Failed expectation
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:35:41)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2974:25
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7]]>
   </failure>
  </testcase>
  <testcase classname="Have manager functionalities" name="should allow manager to Open account for customer" time="0.033">
   <failure type="exception" message="Failed: No element found using locator: by.model(&quot;custId&quot;)"><![CDATA[NoSuchElementError: No element found using locator: by.model("custId")
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:814:27
    at ManagedPromise.invokeCallback_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1376:14)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2927:27
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7
    at processTicksAndRejections (internal/process/task_queues.js:94:5)Error
    at ElementArrayFinder.applyAction_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:459:27)
    at ElementArrayFinder.<computed> [as click] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:91:29)
    at ElementFinder.<computed> [as click] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:831:22)
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:44:20)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
From: Task: Run it("should allow manager to Open account for customer") in control flow
    at UserContext.<anonymous> (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:94:19)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
    at Spec.queueRunnerFactory (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:909:35)
    at Spec.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:526:10)
    at UserContext.fn (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:5340:37)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at runNext (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4257:20)
From asynchronous test: 
Error
    at Suite.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:39:5)
    at addSpecsToSuite (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1107:25)
    at Env.describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1074:7)
    at describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4399:18)
    at Object.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:15:1)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)]]>
   </failure>
  </testcase>
 </testsuite>
 <testsuite name="Customer functions" timestamp="2020-01-27T12:23:00" hostname="localhost" time="0.81" errors="0" tests="5" skipped="0" disabled="0" failures="6">
  <testcase classname="Customer functions" name="should allow new customer to login" time="0.717">
   <failure type="exception" message="Failed: No element found using locator: By(xpath, //button[@ng-click=&quot;custId()&quot;])"><![CDATA[NoSuchElementError: No element found using locator: By(xpath, //button[@ng-click="custId()"])
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:814:27
    at ManagedPromise.invokeCallback_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1376:14)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2927:27
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7
    at processTicksAndRejections (internal/process/task_queues.js:94:5)Error
    at ElementArrayFinder.applyAction_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:459:27)
    at ElementArrayFinder.<computed> [as click] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:91:29)
    at ElementFinder.<computed> [as click] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:831:22)
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:65:61)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
From: Task: Run it("should allow new customer to login") in control flow
    at UserContext.<anonymous> (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:94:19)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
    at Spec.queueRunnerFactory (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:909:35)
    at Spec.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:526:10)
    at UserContext.fn (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:5340:37)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
From asynchronous test: 
Error
    at Suite.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:60:5)
    at addSpecsToSuite (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1107:25)
    at Env.describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1074:7)
    at describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4399:18)
    at Object.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:59:1)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)]]>
   </failure>
  </testcase>
  <testcase classname="Customer functions" name="should display customer entered names" time="0.009">
   <failure type="toMatch" message="Expected ElementFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1550
| | (pending) Task::1549&lt;Run it(&quot;should display customer entered names&quot;) in control flow&gt;
| | | (active) TaskQueue::1553
| | Task::1552&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), then: null, parentElementArrayFinder: ElementArrayFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1550
| | (pending) Task::1549&lt;Run it(&quot;should display customer entered names&quot;) in control flow&gt;
| | | (active) TaskQueue::1553
| | Task::1552&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), getWebElements: Function, locator_: By(xpath, //div[@class=&quot;borderM box padT20 ng-scope&quot;]), actionResults_: null, click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }), elementArrayFinder_: ElementArrayFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1550
| | (pending) Task::1549&lt;Run it(&quot;should display customer entered names&quot;) in control flow&gt;
| | | (active) TaskQueue::1553
| | Task::1552&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), getWebElements: Function, locator_: By(xpath, //div[@class=&quot;borderM box padT20 ng-scope&quot;]), actionResults_: null, click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }), click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }) to match &apos;Alex Waiganjo&apos;."><![CDATA[Error: Failed expectation
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:74:26)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2974:25
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7]]>
   </failure>
  </testcase>
  <testcase classname="Customer functions" name="should show zero balance for a new customer" time="0.008">
   <failure type="toMatch" message="Expected ElementFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1576
| | (pending) Task::1575&lt;Run it(&quot;should show zero balance for a new customer&quot;) in control flow&gt;
| | | (active) TaskQueue::1579
| | Task::1578&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), then: null, parentElementArrayFinder: ElementArrayFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1576
| | (pending) Task::1575&lt;Run it(&quot;should show zero balance for a new customer&quot;) in control flow&gt;
| | | (active) TaskQueue::1579
| | Task::1578&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), getWebElements: Function, locator_: By(xpath, //div[@ng-hide=&quot;noAccount&quot;][1]), actionResults_: null, click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }), elementArrayFinder_: ElementArrayFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1576
| | (pending) Task::1575&lt;Run it(&quot;should show zero balance for a new customer&quot;) in control flow&gt;
| | | (active) TaskQueue::1579
| | Task::1578&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), getWebElements: Function, locator_: By(xpath, //div[@ng-hide=&quot;noAccount&quot;][1]), actionResults_: null, click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }), click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }) to match &apos;Balance: 0&apos;."><![CDATA[Error: Failed expectation
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:81:25)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2974:25
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7]]>
   </failure>
  </testcase>
  <testcase classname="Customer functions" name="should allow customer to deposit" time="0.006">
   <failure type="exception" message="Failed: btnCustomerLogin is not defined"><![CDATA[ReferenceError: btnCustomerLogin is not defined
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:87:9)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2974:25
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7
    at processTicksAndRejections (internal/process/task_queues.js:94:5)
From: Task: Run it("should allow customer to deposit") in control flow
    at UserContext.<anonymous> (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:94:19)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
    at Spec.queueRunnerFactory (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:909:35)
    at Spec.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:526:10)
    at UserContext.fn (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:5340:37)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at runNext (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4257:20)
From asynchronous test: 
Error
    at Suite.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:84:5)
    at addSpecsToSuite (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1107:25)
    at Env.describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1074:7)
    at describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4399:18)
    at Object.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:59:1)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)]]>
   </failure>
  </testcase>
  <testcase classname="Customer functions" name="should allow customer to withdraw money" time="0.067">
   <failure type="toMatch" message="Expected ElementFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1641
| | (pending) Task::1640&lt;Run it(&quot;should allow customer to withdraw money&quot;) in control flow&gt;
| | | (active) TaskQueue::1644
| | | | Task::1647&lt;Set angular root selector to null&gt;
| | | | Task::1649&lt;then&gt;
| | | | Task::1651&lt;then&gt;
| | | | Task::1653&lt;then&gt;
| | | | Task::1655&lt;then&gt;
| | | | Task::1657&lt;then&gt;
| | | | Task::1659&lt;then&gt;
| | | | Task::1661&lt;then&gt;
| | | | Task::1663&lt;then&gt;
| | | | Task::1665&lt;Set angular root selector to null&gt;
| | | | Task::1667&lt;then&gt;
| | | | Task::1669&lt;then&gt;
| | | | Task::1671&lt;then&gt;
| | | | Task::1673&lt;then&gt;
| | | | Task::1675&lt;then&gt;
| | | | Task::1677&lt;then&gt;
| | | | Task::1679&lt;then&gt;
| | | | Task::1681&lt;then&gt;
| | | | Task::1683&lt;Set angular root selector to null&gt;
| | | | Task::1685&lt;then&gt;
| | | | Task::1687&lt;then&gt;
| | | | Task::1689&lt;then&gt;
| | | | Task::1691&lt;then&gt;
| | | | Task::1693&lt;then&gt;
| | | | Task::1695&lt;then&gt;
| | | | Task::1697&lt;then&gt;
| | | | Task::1699&lt;then&gt;
| | | | Task::1701&lt;Set angular root selector to null&gt;
| | | | Task::1703&lt;then&gt;
| | | | Task::1705&lt;then&gt;
| | | | Task::1707&lt;then&gt;
| | | | Task::1709&lt;then&gt;
| | | | Task::1711&lt;then&gt;
| | | | Task::1713&lt;then&gt;
| | | | Task::1715&lt;then&gt;
| | | | Task::1717&lt;then&gt;
| | | | Task::1719&lt;Set angular root selector to null&gt;
| | | | Task::1721&lt;then&gt;
| | | | Task::1723&lt;then&gt;
| | | | Task::1725&lt;then&gt;
| | | | Task::1727&lt;then&gt;
| | | | Task::1729&lt;then&gt;
| | | | Task::1731&lt;then&gt;
| | | | Task::1733&lt;then&gt;
| | | | Task::1735&lt;then&gt;
| | | | Task::1737&lt;Set angular root selector to null&gt;
| | | | Task::1739&lt;then&gt;
| | | | Task::1741&lt;then&gt;
| | | | Task::1743&lt;then&gt;
| | | | Task::1745&lt;then&gt;
| | | | Task::1747&lt;then&gt;
| | | | Task::1749&lt;then&gt;
| | | | Task::1751&lt;then&gt;
| | | | Task::1753&lt;then&gt;
| | Task::1643&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), then: null, parentElementArrayFinder: ElementArrayFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1641
| | (pending) Task::1640&lt;Run it(&quot;should allow customer to withdraw money&quot;) in control flow&gt;
| | | (active) TaskQueue::1644
| | | | Task::1647&lt;Set angular root selector to null&gt;
| | | | Task::1649&lt;then&gt;
| | | | Task::1651&lt;then&gt;
| | | | Task::1653&lt;then&gt;
| | | | Task::1655&lt;then&gt;
| | | | Task::1657&lt;then&gt;
| | | | Task::1659&lt;then&gt;
| | | | Task::1661&lt;then&gt;
| | | | Task::1663&lt;then&gt;
| | | | Task::1665&lt;Set angular root selector to null&gt;
| | | | Task::1667&lt;then&gt;
| | | | Task::1669&lt;then&gt;
| | | | Task::1671&lt;then&gt;
| | | | Task::1673&lt;then&gt;
| | | | Task::1675&lt;then&gt;
| | | | Task::1677&lt;then&gt;
| | | | Task::1679&lt;then&gt;
| | | | Task::1681&lt;then&gt;
| | | | Task::1683&lt;Set angular root selector to null&gt;
| | | | Task::1685&lt;then&gt;
| | | | Task::1687&lt;then&gt;
| | | | Task::1689&lt;then&gt;
| | | | Task::1691&lt;then&gt;
| | | | Task::1693&lt;then&gt;
| | | | Task::1695&lt;then&gt;
| | | | Task::1697&lt;then&gt;
| | | | Task::1699&lt;then&gt;
| | | | Task::1701&lt;Set angular root selector to null&gt;
| | | | Task::1703&lt;then&gt;
| | | | Task::1705&lt;then&gt;
| | | | Task::1707&lt;then&gt;
| | | | Task::1709&lt;then&gt;
| | | | Task::1711&lt;then&gt;
| | | | Task::1713&lt;then&gt;
| | | | Task::1715&lt;then&gt;
| | | | Task::1717&lt;then&gt;
| | | | Task::1719&lt;Set angular root selector to null&gt;
| | | | Task::1721&lt;then&gt;
| | | | Task::1723&lt;then&gt;
| | | | Task::1725&lt;then&gt;
| | | | Task::1727&lt;then&gt;
| | | | Task::1729&lt;then&gt;
| | | | Task::1731&lt;then&gt;
| | | | Task::1733&lt;then&gt;
| | | | Task::1735&lt;then&gt;
| | | | Task::1737&lt;Set angular root selector to null&gt;
| | | | Task::1739&lt;then&gt;
| | | | Task::1741&lt;then&gt;
| | | | Task::1743&lt;then&gt;
| | | | Task::1745&lt;then&gt;
| | | | Task::1747&lt;then&gt;
| | | | Task::1749&lt;then&gt;
| | | | Task::1751&lt;then&gt;
| | | | Task::1753&lt;then&gt;
| | Task::1643&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), getWebElements: Function, locator_: By(xpath, //div[@ng-hide=&quot;noAccount&quot;][1]), actionResults_: null, click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }), elementArrayFinder_: ElementArrayFinder({ browser_: ProtractorBrowser({ controlFlow: Function, schedule: Function, setFileDetector: Function, getExecutor: Function, getSession: Function, getCapabilities: Function, quit: Function, actions: Function, touchActions: Function, executeScript: Function, executeAsyncScript: Function, call: Function, wait: Function, sleep: Function, getWindowHandle: Function, getAllWindowHandles: Function, getPageSource: Function, close: Function, getCurrentUrl: Function, getTitle: Function, findElementInternal_: Function, findElementsInternal_: Function, takeScreenshot: Function, manage: Function, switchTo: Function, driver: thenableWebDriverProxy({ flow_: ControlFlow::1555
| TaskQueue::1641
| | (pending) Task::1640&lt;Run it(&quot;should allow customer to withdraw money&quot;) in control flow&gt;
| | | (active) TaskQueue::1644
| | | | Task::1647&lt;Set angular root selector to null&gt;
| | | | Task::1649&lt;then&gt;
| | | | Task::1651&lt;then&gt;
| | | | Task::1653&lt;then&gt;
| | | | Task::1655&lt;then&gt;
| | | | Task::1657&lt;then&gt;
| | | | Task::1659&lt;then&gt;
| | | | Task::1661&lt;then&gt;
| | | | Task::1663&lt;then&gt;
| | | | Task::1665&lt;Set angular root selector to null&gt;
| | | | Task::1667&lt;then&gt;
| | | | Task::1669&lt;then&gt;
| | | | Task::1671&lt;then&gt;
| | | | Task::1673&lt;then&gt;
| | | | Task::1675&lt;then&gt;
| | | | Task::1677&lt;then&gt;
| | | | Task::1679&lt;then&gt;
| | | | Task::1681&lt;then&gt;
| | | | Task::1683&lt;Set angular root selector to null&gt;
| | | | Task::1685&lt;then&gt;
| | | | Task::1687&lt;then&gt;
| | | | Task::1689&lt;then&gt;
| | | | Task::1691&lt;then&gt;
| | | | Task::1693&lt;then&gt;
| | | | Task::1695&lt;then&gt;
| | | | Task::1697&lt;then&gt;
| | | | Task::1699&lt;then&gt;
| | | | Task::1701&lt;Set angular root selector to null&gt;
| | | | Task::1703&lt;then&gt;
| | | | Task::1705&lt;then&gt;
| | | | Task::1707&lt;then&gt;
| | | | Task::1709&lt;then&gt;
| | | | Task::1711&lt;then&gt;
| | | | Task::1713&lt;then&gt;
| | | | Task::1715&lt;then&gt;
| | | | Task::1717&lt;then&gt;
| | | | Task::1719&lt;Set angular root selector to null&gt;
| | | | Task::1721&lt;then&gt;
| | | | Task::1723&lt;then&gt;
| | | | Task::1725&lt;then&gt;
| | | | Task::1727&lt;then&gt;
| | | | Task::1729&lt;then&gt;
| | | | Task::1731&lt;then&gt;
| | | | Task::1733&lt;then&gt;
| | | | Task::1735&lt;then&gt;
| | | | Task::1737&lt;Set angular root selector to null&gt;
| | | | Task::1739&lt;then&gt;
| | | | Task::1741&lt;then&gt;
| | | | Task::1743&lt;then&gt;
| | | | Task::1745&lt;then&gt;
| | | | Task::1747&lt;then&gt;
| | | | Task::1749&lt;then&gt;
| | | | Task::1751&lt;then&gt;
| | | | Task::1753&lt;then&gt;
| | Task::1643&lt;then&gt;, session_: ManagedPromise::4 {[[PromiseStatus]]: &quot;fulfilled&quot;}, executor_: Executor({ w3c: false, customCommands_: Map( [ &apos;launchApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/launch_app&apos; }) ], [ &apos;getNetworkConditions&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;setNetworkConditions&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/network_conditions&apos; }) ], [ &apos;getNetworkConnection&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;setNetworkConnection&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/network_connection&apos; }) ], [ &apos;toggleAirplaneMode&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_airplane_mode&apos; }) ], [ &apos;toggleWiFi&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_wifi&apos; }) ], [ &apos;toggleData&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_data&apos; }) ], [ &apos;toggleLocationServices&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/toggle_location_services&apos; }) ], [ &apos;getGeolocation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;setGeolocation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/location&apos; }) ], [ &apos;getCurrentDeviceActivity&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/current_activity&apos; }) ], [ &apos;startDeviceActivity&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/start_activity&apos; }) ], [ &apos;getAppiumSettings&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;setAppiumSettings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/settings&apos; }) ], [ &apos;getCurrentContext&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;selectContext&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/context&apos; }) ], [ &apos;getScreenOrientation&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;setScreenOrientation&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/orientation&apos; }) ], [ &apos;isDeviceLocked&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/is_locked&apos; }) ], [ &apos;lockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/lock&apos; }) ], [ &apos;unlockDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/unlock&apos; }) ], [ &apos;installApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/install_app&apos; }) ], [ &apos;isAppInstalled&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/app_installed&apos; }) ], [ &apos;removeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/remove_app&apos; }) ], [ &apos;pullFileFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_file&apos; }) ], [ &apos;pullFolderFromDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/pull_folder&apos; }) ], [ &apos;pushFileToDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/push_file&apos; }) ], [ &apos;listContexts&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/contexts&apos; }) ], [ &apos;uploadFile&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/file&apos; }) ], [ &apos;switchToParentFrame&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/frame/parent&apos; }) ], [ &apos;fullscreen&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/window/fullscreen&apos; }) ], [ &apos;sendAppToBackground&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/background&apos; }) ], [ &apos;closeApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/close&apos; }) ], [ &apos;getAppStrings&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/strings&apos; }) ], [ &apos;launchSession&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/launch&apos; }) ], [ &apos;resetApp&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/app/reset&apos; }) ], [ &apos;hideSoftKeyboard&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/hide_keyboard&apos; }) ], [ &apos;getDeviceTime&apos;, Object({ method: &apos;GET&apos;, path: &apos;/session/:sessionId/appium/device/system_time&apos; }) ], [ &apos;openDeviceNotifications&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/open_notifications&apos; }) ], [ &apos;rotationGesture&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/rotate&apos; }) ], [ &apos;shakeDevice&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/appium/device/shake&apos; }) ], [ &apos;sendChromiumCommand&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command&apos; }) ], [ &apos;sendChromiumCommandAndGetResult&apos;, Object({ method: &apos;POST&apos;, path: &apos;/session/:sessionId/chromium/send_command_and_get_result&apos; }) ] ), log_: Logger({ name_: &apos;webdriver.http.Executor&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver.http&apos;, level_: null, parent_: Logger({ name_: &apos;webdriver&apos;, level_: null, parent_: Logger({ name_: &apos;&apos;, level_: OFF, parent_: null, handlers_: null }), handlers_: null }), handlers_: null }), handlers_: null }) }), fileDetector_: null, onQuit_: undefined, cancel: Function, then: Function, catch: Function, getNetworkConnection: Function, setNetworkConnection: Function, toggleAirplaneMode: Function, toggleWiFi: Function, toggleData: Function, toggleLocationServices: Function, getGeolocation: Function, setGeolocation: Function, getCurrentDeviceActivity: Function, startDeviceActivity: Function, getAppiumSettings: Function, setAppiumSettings: Function, getCurrentContext: Function, selectContext: Function, getScreenOrientation: Function, setScreenOrientation: Function, isDeviceLocked: Function, lockDevice: Function, unlockDevice: Function, installApp: Function, isAppInstalled: Function, removeApp: Function, pullFileFromDevice: Function, pullFolderFromDevice: Function, pushFileToDevice: Function, listContexts: Function, uploadFile: Function, switchToParentFrame: Function, fullscreen: Function, sendAppToBackground: Function, closeApp: Function, getAppStrings: Function, launchSession: Function, resetApp: Function, hideSoftKeyboard: Function, getDeviceTime: Function, openDeviceNotifications: Function, rotationGesture: Function, shakeDevice: Function, sendChromiumCommand: Function, sendChromiumCommandAndGetResult: Function }), element: Function, $: Function, $$: Function, baseUrl: &apos;&apos;, getPageTimeout: 10000, params: Object({  }), resetUrl: &apos;data:text/html,&lt;html&gt;&lt;/html&gt;&apos;, debugHelper: DebugHelper({ browserUnderDebug_: &lt;circular reference: Object&gt; }), ready: ManagedPromise::19 {[[PromiseStatus]]: &quot;fulfilled&quot;}, trackOutstandingTimeouts_: true, mockModules_: [ Object({ name: &apos;protractorBaseModule_&apos;, script: Function, args: [ true ] }) ], ExpectedConditions: ProtractorExpectedConditions({ browser: &lt;circular reference: Object&gt; }), plugins_: Plugins({ setup: Function, onPrepare: Function, teardown: Function, postResults: Function, postTest: Function, onPageLoad: Function, onPageStable: Function, waitForPromise: Function, waitForCondition: Function, pluginObjs: [  ], assertions: Object({  }), resultsReported: false }), allScriptsTimeout: 11000, getProcessedConfig: Function, forkNewDriverInstance: Function, restart: Function, restartSync: Function, internalRootEl: &apos;&apos;, internalIgnoreSynchronization: false }), getWebElements: Function, locator_: By(xpath, //div[@ng-hide=&quot;noAccount&quot;][1]), actionResults_: null, click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }), click: Function, sendKeys: Function, getTagName: Function, getCssValue: Function, getAttribute: Function, getText: Function, getSize: Function, getLocation: Function, isEnabled: Function, isSelected: Function, submit: Function, clear: Function, isDisplayed: Function, getId: Function, takeScreenshot: Function }) to match &apos;Balance: 1000&apos;."><![CDATA[Error: Failed expectation
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:110:26)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2974:25
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7]]>
   </failure>
   <failure type="exception" message="Failed: No element found using locator: By(xpath, //button[@ng-click=&quot;withdrawl()&quot;])"><![CDATA[NoSuchElementError: No element found using locator: By(xpath, //button[@ng-click="withdrawl()"])
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:814:27
    at ManagedPromise.invokeCallback_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1376:14)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2927:27
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:668:7
    at processTicksAndRejections (internal/process/task_queues.js:94:5)Error
    at ElementArrayFinder.applyAction_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:459:27)
    at ElementArrayFinder.<computed> [as click] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:91:29)
    at ElementFinder.<computed> [as click] (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\built\element.js:831:22)
    at UserContext.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:99:64)
    at C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:112:25
    at new ManagedPromise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:1077:7)
    at ControlFlow.promise (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:2505:12)
    at schedulerExecute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:95:18)
    at TaskQueue.execute_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3084:14)
    at TaskQueue.executeNext_ (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\promise.js:3067:27)
From: Task: Run it("should allow customer to withdraw money") in control flow
    at UserContext.<anonymous> (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:94:19)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at QueueRunner.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4199:10)
    at Spec.queueRunnerFactory (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:909:35)
    at Spec.execute (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:526:10)
    at UserContext.fn (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:5340:37)
    at attempt (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4297:26)
    at QueueRunner.run (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4217:20)
    at runNext (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4257:20)
From asynchronous test: 
Error
    at Suite.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:97:5)
    at addSpecsToSuite (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1107:25)
    at Env.describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1074:7)
    at describe (C:\Users\user\AppData\Roaming\npm\node_modules\protractor\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:4399:18)
    at Object.<anonymous> (C:\Users\user\Documents\PROJECTS\AUTOMATIONS\Protractor\test1\specs\register.js:59:1)
    at Module._compile (internal/modules/cjs/loader.js:955:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:991:10)
    at Module.load (internal/modules/cjs/loader.js:811:32)
    at Function.Module._load (internal/modules/cjs/loader.js:723:14)]]>
   </failure>
  </testcase>
 </testsuite>
</testsuites>